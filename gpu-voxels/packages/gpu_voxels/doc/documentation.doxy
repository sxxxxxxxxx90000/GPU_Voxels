/**
 * \page Prerequisites Prerequisites
 * Some words on what you will need to build the library. I don’t give explicit version requirements as they get outdated too fast. 
 * For specific problems or questions please write to our GitHub bugtracker <a title="Bugtracker" href="https://github.com/fzi-forschungszentrum-informatik/gpu-voxels/issues">https://github.com/fzi-forschungszentrum-informatik/gpu-voxels/issues</a>.
 * 
 * \section hardware Hardware
 * As this is called GPU-Voxels, you will of course need a decent graphics card! 
 * CUDA <a title="CUDA Compute Capability" href="https://en.wikipedia.org/wiki/CUDA#Supported_GPUs" target="_blank">Compute Capability</a> 2.0 or greater is required. 
 * The more GPU memory the better.\n
 * We run the library on various workstations and even on laptops with 64 Bit OS. But we never tested it with 32 Bit! So be careful with that.\n
 * Also we made it compile on the NVIDIA Jetson TX1 (ARM64 SoC), although it requires some effort to meet all the requirements to build GPU Voxels.
 * But as CUDA does not support Shared Memory (so no visualization available) for ARMs we did not investigate that further.
 *
 * \section req_libs Required libraries to build GPU-Voxels
 * The software is tested on 64 Bit Ubuntu Linux Trusty (14.04), Xenial (16.04) and Bionic (18.04). Nevertheless it should run on every decent Linux-Distribution and even on MacOS. As long as you have the following packages available:
 * <ul>
 * <li>CUDA &gt; 7.5, 8.0 9.x or 10.0</li>
 * <li>PCL</li>
 * <li>OpenNI</li>
 * <li>Boost</li>
 * <li>TinyXML (libtinyxml-dev)</li>
 * </ul>
 *
 * For the visualizer you will also need:
 * <ul>
 * <li>GLEW libglew-dev Version: 1.10.0-3 or newer)</li>
 * <li>GLM (libglm-dev Version: 0.9.5.1-1 or newer) On Ubuntu 16.04 you will have to patch one file: See <a title="GLM Bugtracker" href="https://github.com/g-truc/glm/issues/530" target="_blank">https://github.com/g-truc/glm/issues/530</a></li>
 * <li>OpenGL</li>
 * <li>GLUT (freeglut3 Version: 2.8.1-1, freeglut3-dev Version: 2.8.1-1)</li>
 * </ul>
 *
 * \section enablingc11 Compiling without C++11
 * C++11 is enabled by default. To compile without C++11 mode comment out this at the top of packages/gpu_voxels/CMakeLists.txt:\n
 *  SET(CMAKE_CXX_STANDARD 11) \n
 * This is important if you are still using ROS Indigo and need to compile without C++11 support for compatibility reasons. There is a separate indigo branch, that only differs in this line to disable C++11 during compilation. \n
 *
 * \section known_iss Known issues
 * There is a known bug in GLM on Ubuntu 16.04 that has to be patched to allow usage of the visualizer. Apply the patch described <a href="https://github.com/g-truc/glm/issues/530">here</a> to /usr/include/glm/detail/func_common.inl \n
 * If the ROS dependency was found, but the GPU-Voxels URDF features are still unabailable, run `source /opt/ros/YOUR_ROS_DISTRO/setup.bash` before running cmake.
 * Eigen 3 issues: can be fixed by cloning a more current unstable Eigen version and placing it in CMAKE_PREFIX_PATH. See http://eigen.tuxfamily.org/index.php?title=Main_Page#Download\n
 *  Some observed Eigen issues: \n
 *  On Ubuntu 18.04 with CUDA 10.0: "math_functions.hpp not found"\n
 *  Eigen 3.3.4 and 3.3.5 with CUDA 9.0, 9.1, 9.2: Error: class "Eigen::half" has no member "x"\n
 * Cuda 8.0: Code compiled with Cuda 8.0 works fine with older GPU drivers such as 375.66, but there are runtime errors with driver 384.111 and newer ("PTX JIT compilation failed"). Easy fix: use Cuda 10 with a current 410 or newer driver version. Cuda 10 is also available for Ubuntu 14.04 and 16.04.
 *
 * \section add_tools Additional Tools
 * As soon as you want to experiment with your own geometrical models, you will have to “voxelize” them. Models are represented as dense pointclouds in GPU-Voxels. I am using the really nice tool <b><em>binvox </em></b>to perform this task on the GPU. You can download it at <a title="Binvox" href="http://www.patrickmin.com/binvox/" target="_blank">http://www.patrickmin.com/binvox/</a>
 * \n\n
 * Huge thanks to Patrick Min (<a title="Patrick Min" href="http://www.patrickmin.com/" target="_blank">http://www.patrickmin.com/</a>) for offering the tool for free as a download!
 * \n\n\n
 * ==> After installing the libs, continue with \ref Compiling.
 *
 */



/**
 * \page Compiling Compiling
 * How can I build and use GPU-Voxels?
 *
 * \section environment The environment
 * <ul>
 * <li>The software is an interchangeable library (ICL) running within FZIs ic_workspace. ic means, it can run in whatever environment, e.g. as a ROS-node, as a MCA-module or as a standalone program.</li>
 * <li>ICLs are made to be platform independent. Therefore it should be possible to run gpu-voxels natively on the Mac. We never tried though…</li>
 * <li>We build it with FZIs <em>icmaker</em>, which is a comfort layer on top of <em>cmake</em>, comparable to ROS <em>catkin</em></li>
 * <li>gpu_voxels depends on the basic library<em> icl_core</em> (OS independent comfort layer that implements logging, config, …) which is delivered with the code.</li>
 * <li>There exist a lot more ICLs, making autonomous cars drive, Marsrovers explore, walking machines walk… Some of them will become OpenSource sooner or later.</li>
 * </ul>
 *
 * \section build_process The build process
 * <ol>
 * <li>Install the \ref Prerequisites "required libraries" and make sure that CUDA and its <em><b>nvcc</b></em> is correctly installed.</li>
 * <li>Clone the software from <a title="GitHub GPU-Voxles Download" href="https://github.com/fzi-forschungszentrum-informatik/gpu-voxels">GitHub</a> into a directory of your choice.</li>
 * <li>Change into the directory and create a build folder: <em><b>mkdir build</b></em><br>
 * A successfull cmake run should contain a section like this:</li>
 * \verbatim
hermann-local@ids-isabel-2:~/src/ic_workspace_open_source/build$ cmake ..
-- --------------------------------------------------------------------------
-- ------------------------ GPU Voxels configuration ------------------------
--
-- [OK]      Building GPU-Voxels. Found CUDA.
-- [OK]      Building GPU-Voxels with visualization. GLEW, GLM, OpenGL and GLUT were found.
-- [OK]      Building GPU-Voxels with URDF support. urdfdom, orocos and kdl_parser were found.
-- [OK]      Building GPU-Voxels with ROS connections. ROS was found.
-- [OK]      Building GPU-Voxels with Kinect support. OpenNI was found.
-- [OK]      Building GPU-Voxels with Octomap support. Octomap found.
-- [OK]      Building GPU-Voxels with PCL interfaces. PCL found.
--
-- -------------------- END of GPU Voxels configuration ---------------------
-- --------------------------------------------------------------------------
\endverbatim
 * <li>Change into the build folder and run cmake: <em><b>cd build &amp;&amp; cmake .. </b></em></li>
 * <li>Start compilation: <em><b>make</b></em> (or if you have some more cores <b><em>make -j9</em></b>)</li>
 * </ol>
 * Feel free to use <b><em>ninja</em></b> for the build. We experienced no problems with that. \n
 * To switch between Debug and Release builds, use <em><b>cmake .. -DCMAKE_BUILD_TYPE=[Release/Debug/RelWithDebInfo]</b></em>
 *
 * \section comp_troubleshooting Troubleshooting
 * <ul>
 * <li>No build targets are generated by cmake? ==> Read the output of cmake and search for missing dependencies.</li>
 * <li>You see some warnings during the build process? ==> Don’t worry, we seem then too (: This is work in progress…</li>
 * <li>Problems with GLM while building the Visualizer? ==> Most probably you will have to patch one file: See <a title="GLM Bugtracker" href="https://github.com/g-truc/glm/issues/530" target="_blank">https://github.com/g-truc/glm/issues/530</a>
 * </ul>
 * \n\n
 * ==> After installing the libs, continue with starting an \ref Examples "example".
 */




/**
 * \page Examples Examples
 * Yay, it compiled - Whats next?!
 *
 * \section example_progs Example Programs
 * After compiling you should end with some example programs within the <b><em>build/bin</em></b> directory.\n
 * All programs require the environment variable <b><em>GPU_VOXELS_MODEL_PATH</em></b> be set to the folder, that contains the example files (<b><em>gpu_voxels/models</em></b>)
 * <ul>
 * <li><b><em>collisions</em></b> – Shows various ways to collide maps</li>
 * <li><b><em>distance_kinect_demo</em></b> – Calculates a distance field on Kinect data and measures distances in it</li>
 * <li><b><em>heightmap_loader</em></b> – Shows how to convert 2D png images to voxel-geometries</li>
 * <li><b><em>urdf_loader_ros_listener</em></b> – Animates a robot model via ROS joint topics</li>
 * <li><b><em>shift_vs_transform</em></b> – Demonstrates performance gain when shifting voxelmaps</li>
 * <li><b><em>robot_vs_environment</em></b> – High Level API example</li>
 * <li><b><em>swept_volume_vs_environment</em></b> – Kinect collision Detection against a Sweep</li>
 * <li><b>sandbox</b> – Shows the usage of the primitive_array Data type</li>
 * <li><b><em> octree_provider</em></b> – Command line interface to the main functions of GPU-Voxels. To collide live Kinect data with a virtual %Robot model, execute this:
 * \verbatim
 ./bin/octree_provider -shm 0 -m kinect_live -resTree 20 -resFree 20 -resOcc 20 -mem 1024 -fps 30 -c -shm 1 -m load_pc -f ../packages/gpu_voxels/models/robot4cmRes.pcd -resTree 20 -resFree 20 -resOcc 20 -x 20 -y 180 -z -10
 \endverbatim
 * </li>
 * </ul>
 *
 */


/**
 * \page visualization Visualization
 * Okay, example is running, but where is the eyecandy?!
 *
 * \section vis 3D-Visualizer
 * After you launched one of the examples or data providers, you have to launch the 3D-Viewer to actually see more than the Logstream on your console \n
 * <b><em>gpu_voxels_visualizer</em></b>.\n
 * As it based on Shared memory communication, a main-program has to run already and the Visualizer has to be restarted after the main program is restarted! \n
 * You can control the rendering of various layers of information:
 * First of all you can toggle the drawing of whole maps/octrees/lists by using <em>, or .</em> to switch between maps/octrees/lists and then use <em>Function Keys</em> to toggle the maps. \n
 * You may inependently toggle the drawing of Voxeltypes with the number keys, holding ALT to set decimal prefix. E.g. Pressing "ALT + 2" and then "4" will toggle Voxeltype 24.
 * Press "h" while your mouse is inside the visualizer window, to get a list of Shortkeys in your console.
 * \n\n
 * <b>Visualizer Keyboard Controls:</b>
 * @copydoc gpu_voxels::visualization::Visualizer::keyboardFunction()
 * \n\n
 * <b>Visualizer Mouse Controls:</b>
 * @copydoc gpu_voxels::visualization::Visualizer::mouseClickFunction()
 * \n\n
 * The visualizer can be parametrized with XML configfiles to set colors, camera poses and more: <em><b>./bin/gpu_voxels_visualizer -c ../packages/gpu_voxels/src/examples/VisConfig_live_col_detect.xml</b></em>\n
 * Find an example in the <em><b>examples</b></em> directory.
 * \n\n
 * If you experience a crash (either of the main program or the visualizer), it could be necessary to delete some shared-memory files: \n
 * <em><b>rm /dev/shm/{OctreeSharedMemory,PrimitiveArraysSharedMemory,VoxelmapSharedMemory}</b></em>
 *
 */

/**
 * \page model_generation Model generation
 * In order to have a robot model in GPU-Voxels you need to provide pointcloud representations of all robot links together with a description of the robot’s kinematical structure.
 * You can choose between a <a href="https://en.wikipedia.org/wiki/Denavit%E2%80%93Hartenberg_parameters" target="_blank">DH-parameter</a> model and a <a href="http://wiki.ros.org/urdf" target="_blank">URDF</a> model.
 * For the voxelization of meshes we rely on <a href="http://www.cs.princeton.edu/~min/binvox/" target="_blank">binvox</a> by Patrick Min.
 * It is a great GPU-based rasterizer that scans meshfiles and generates binary voxelmaps.
 * By default the user defines the size of the desired voxelspace and the tool will scale the mesh to fit into the space.

 * To keep the scale and the coordinate systems origin of the model, the user can also specify a boundingbox.
 * <table id="tablepress-3" class="tablepress tablepress-id-3">
 *   <tr class="row-1 odd">
 *       <td>
 *           <IMG class="wp-image-268" src="http://www.gpu-voxels.org/wp-content/uploads/2015/06/Bildschirmfoto-vom-2015-06-13-182259.png" alt="Upper Body Mesh" height="270" width="207">
 *           Upper Body Mesh
 *       </td>
 *       <td>
 *           <IMG class="wp-image-269" src="http://www.gpu-voxels.org/wp-content/uploads/2015/06/Bildschirmfoto-vom-2015-06-14-192423.png" alt="Voxelized Upper Body" height="270" width="227">
 *           Voxelized Upper Body
 *       </td>
 *       <td>
 *           <IMG class="wp-image-267" src="http://www.gpu-voxels.org/wp-content/uploads/2015/06/Bildschirmfoto-vom-2015-06-13-165809.png" alt="Voxelized HoLLiE in GPU-Voxels" height="270" width="374">
 *           Voxelized HoLLiE in GPU-Voxels
 *       </td>
 *   </tr>
 * </table>
 *\n\n
 *We supply a script (within the <em>model</em> folder) that will automatically set the boundingbox and the number of voxels for a given mesh file and run it through binvox:
 * \verbatim
 voxelize.sh path_to_mesh_file scaling_factor
 \endverbatim
 * It will keep the filenames but change the extension. Just copy the .binvox files to the model folder of your GPU-Voxels directory and you can use them with your URDF or DH robot.
 *
 */

/**
 * \page usage_as_library Usage as a library
 * You convinced me, the lib is cool. But now I want to use it in my way!
 * \section Use_as_lib Use GPU-Voxels in own projects
 * Do a <em><b>make install</b></em> to export the Binaries and the required headers into the <em><b>export</b></em> directory to link against them from another Build-Environment. \n
 * You should not install into your system pathes, which would require root-rights. Instead you may specify an install directory via running <em>cmake .. -DCMAKE_INSTALL_PREFIX=/my-home/my/gvl/install/dir</em> \n
 * In your own project add a <em>FIND_PACKAGE(gpu_voxels REQUIRED)</em> and point cmake to the install directory of GPU-Voxels: <em>cmake .. -DCMAKE_PREFIX_PATH=/my-home/my/gvl/install/dir/</em> \n
 * You can find an example in the GPU-Voxels base directory, <em>example_how_to_link</em>, including a README.txt
 *
 * \section link_troubleshooting Troubleshooting
 * <ul>
 * <li>You get errors like <em>No os_mem implementation defined for this platform.</em> when including ICL headers in your own project? ==> You are missing a precompiler define. Add <em>add_definitions( ${icl_core_DEFINITIONS} ${gpu_voxels_DEFINITIONS} )</em> to your own <em>CMakeLists.txt</em></li>
 * </ul>
 *
 */
